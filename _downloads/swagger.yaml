swagger: '2.0'
info:
  version: 0.7.8
  title: Catapult REST API Reference
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  description: |
    # Introduction

    **Catapult REST API** combines HTTP and WebSockets to perform read and write actions in the NEM blockchain.

    ## Requests

    Catapult REST API uses port ``3000``. It accepts both HTTP ``GET``, ``PUT`` and ``POST`` requests.

    Assuming that the Catapult server and Catapult REST are running locally, HTTP GET requests can be executed from a browser and have the form:

    http://localhost:3000/<path-to-API-request>

    For example:

    http://localhost:3000/account/7D08373CFFE4154E129E04F0827E5F3D6907587E348757B0F87D2F839BF88246/transactions

    HTTP PUT and POST requests use JSON structures in the request body. Request returns data (if any is returned) using JSON structures.

    We recommend using one of the following tools to interact with Catapult REST API, especially for PUT and POST methods.

    This kind of request cannot usually be executed from within the browser unless you use a plugin which enables you to do it.

    ## Http errors

    | Status code | Description                                                                                       |
    |-------------|---------------------------------------------------------------------------------------------------|
    | 200         | Ok. The request has succeeded.                                                                    |
    | 202         | Accepted. The request has been accepted for processing but the processing has not been completed. |
    | 400         | Bad request. Check your request syntax.                                                           |
    | 404         | Not found. The resource does not exist.                                                           |
    | 409         | Conflict. Check your arguments.                                                                   |
    | 500         | Internal error. Unexpected condition.                                                             |

    ## Http status

    | Key     | Description                               |
    |---------|-------------------------------------------|
    | code    | Error identifier in camelCase.            |
    | message | Error explained in human-readable format. |

    **Example**

    ```
    {
      "code": "InvalidArgument",
      "message": "accountId has an invalid format"
    }
    ```

    ##  Numbers: lower and higher

    Javascript operate on 32bit values. To enable representation up to 64 bits, the API returns numbers encoded in two parts: ``lower`` and ``higher``.

    Check how to [compact lower and higher into a simple number](https://github.com/nemtech/nem2-library-js/blob/f171afb516a282f698081aea407339cfcd21cd63/src/coders/uint64.js#L37).

    ## Tools

    ### NEM2-SDK

    The **NEM2 Software Development Kit** is the primary software development tool to create NEM2 components, such as additional tools, libraries or applications.

    >  ℹ️️ Consider using **NEM2-SDK** instead of calling the API directly.

    [Reference]

    [Guides]

    ### Insomnia

    Download [Insomnia app] for your operative system and import:

    [Insomnia file]

    [Catapult REST]: https://nemtech.github.io/concepts/node.html#catapult-rest-mongodb-api-server
    [Catapult server]: https://nemtech.github.io/concepts/node.html#catapult-server-the-blockchain-network
    [Guides]: https://nemtech.github.io/guides/overview.html
    [Reference]: https://nemtech.github.io/sdk/overview.html
    [Insomnia app]: https://insomnia.rest/
    [Insomnia file]: #

host: 'localhost:3000'

tags:
  - name: Account routes
    description: |
      [Account](https://nemtech.github.io/concepts/account.html) related endpoints.
  - name: Blockchain routes
    description: |
      [Block](https://nemtech.github.io/concepts/block.html) related endpoints.
  - name: Mosaic routes
    description: |
      [Mosaic](https://nemtech.github.io/concepts/mosaic.html) related endpoints.
  - name: Namespace routes
    description: |
      [Namespace](https://nemtech.github.io/concepts/mosaic.html) related endpoints.
  - name: Transaction routes
    description: |
      [Transaction](https://nemtech.github.io/concepts/transaction.html) related endpoints.
  - name: Network routes
    description: |
      Network related endpoints.
  - name: Node routes
    description: |
      [Node](https://nemtech.github.io/concepts/node.html) related endpoints.
  - name: Websockets
    description: |
      Interaction with API WebSockets in NEM2-SDK is done with [Listeners](https://nemtech.github.io/concepts/listener.html).

      | API WebSockets             | SDK Listeners                                                                     |
      |----------------------------|-----------------------------------------------------------------------------------|
      | block                      | `newBlock()` : `Observable<BlockInfo>`                                            |
      | confirmedAdded/ADDRESS     | `confirmed(address: Address)` : `Observable<Transaction>`                         |
      | unconfirmedAdded/ADDRESS   | `unconfirmedAdded(address: Address)` : `Observable<Transaction>`                  |
      | unconfirmedRemoved/ADDRESS | `unconfirmedRemoved(address: Address)` : `Observable<string>`                     |
      | partialAdded/ADDRESS       | `aggregateBondedAdded(address: Address)` : `Observable<AggregateTransaction>`     |
      | partialRemoved/ADDRESS     | `aggregateBondedRemoved(address: Address)`: `Observable<string>`                  |
      | cosignature/ADDRESS        | `cosignatureAdded(address: Address)` : `Observable<CosignatureSignedTransaction>` |
      | status/ADDRESS             | `status(address: Address)` : `Observable<TransactionStatusError>`                 |


      ## Status Errors


      This section describes the error messages that can be returned via status channel after announcing a transaction.

      >  ⚠️ ️The configuration presented is NOT intended to be used on the public network. These are the parameters used for the Catapult Testnet version (MIJIN_TEST).

      | Error code | Description |
      |---|---|
      | Neutral | |
      | Failure | |
      | Failure_Core_Past_Deadline | The deadline lies too far in the future. Deadlines are only allowed to lie up to `24` hours ahead. |
      | Failure_Core_Future_Deadline | The deadline lies in the past. |
      | Failure_Core_Insufficient_Balance | The account does not have enough funds. |
      | Failure_Core_Timestamp_Too_Far_In_Future | The timestamp of the entity lies too far in the future. |
      | Failure_Core_Too_Many_Transactions | |
      | Failure_Core_Nemesis_Account_Signed_After_Nemesis_Block | The supplied transaction has the nemesis account as the sender and cannot be included in a normal block. |
      | Failure_Core_Wrong_Network | The entity was rejected because it has the wrong network specified. |
      | Failure_Core_Invalid_Address | An account specified in the request is not valid. |
      | Failure_Core_Block_Harvester_Ineligible | |
      | Failure_Hash_Exists | The hash of the entity already exists either in the cache or the database. |
      | Failure_Signature_Not_Verifiable | The signature of the entity failed upon verification. |
      | Failure_Aggregate_Too_Many_Transactions | The aggregate transaction exceeds the maximum number of inner transactions. An aggregate transaction can contain up to `1000` inner transactions. |
      | Failure_Aggregate_No_Transactions | The aggregate transaction does not contain any inner transactions. |
      | Failure_Aggregate_Too_Many_Cosignatures | The aggregate transaction contains too many cosignatories. The maximum number of cosignatories allowed is `15`. |
      | Failure_Aggregate_Redundant_Cosignatures | The aggregate transaction contains the cosignature of the account who signed the transaction. |
      | Failure_Aggregate_Ineligible_Cosigners | The account who signed the aggregate transaction is not an eligible cosigner. |
      | Failure_Aggregate_Missing_Cosigners | The aggregate transaction was announced as complete but there are missing signatures. |
      | Failure_Lock_Invalid_Hash_Algorithm | The hash algorithm used is not defined. |
      | Failure_Lock_Invalid_Mosaic_Id | The locks funds transaction failed because locked mosaic is not XEM. |
      | Failure_Lock_Invalid_Mosaic_Amount | The amount of locked XEM is insufficient. The minimum amount is `10`. |
      | Failure_Lock_Hash_Exists | The locks funds transaction failed because the hash of the aggregate transaction already exists either in the cache or in the database. |
      | Failure_Lock_Hash_Does_Not_Exist | The aggregate transaction failed because its hash has not been locked previously. |
      | Failure_Lock_Missing_Secret_Padding | |
      | Failure_Lock_Hash_Not_Implemented | The secret lock and the secret proof hash algorithm used is different. |
      | Failure_Lock_Proof_Size_Out_Of_Bounds | The proof length is invalid. It should be between `10 and 1000 bytes`. |
      | Failure_Lock_Secret_Mismatch | The proof hashed does not equal to the secret. |
      | Failure_Lock_Unknown_Secret | The secret proof transaction specifies a secret that has not been found in the cache. |
      | Failure_Lock_Inactive_Hash | The aggregate bonded transaction has been sent after the secret lock funds transactions for this hash expired. |
      | Failure_Lock_Inactive_Secret | The secret proof transaction has been sent after the secret lock transaction expired. |
      | Failure_Lock_Hash_Algorithm_Mismatch | |
      | Failure_Lock_Hash_Already_Used | The lock funds transaction failed because the aggregate transaction hash has already been locked. |
      | Failure_Lock_Secret_Already_Used | The secret lock transaction failed because the hash has already been used. |
      | Failure_Lock_Invalid_Duration | Duration lies too far in the future or refers to past. Duration is allowed to lie up to `N` blocks in the future. |
      | Failure_Multisig_Modify_Account_In_Both_Sets | Adding and removing the same account in a single transaction is not possible. |
      | Failure_Multisig_Modify_Multiple_Deletes | It is not possible to remove multiple cosignatories at once. |
      | Failure_Multisig_Modify_Redundant_Modifications | The transaction tried to add the same cosignatory more than once. |
      | Failure_Multisig_Modify_Unknown_Multisig_Account | The multisig has not been created yet and the transaction includes a delete modification. |
      | Failure_Multisig_Modify_Not_A_Cosigner | The account who signed the transaction is not a cosignatory of the multisig account. |
      | Failure_Multisig_Modify_Already_A_Cosigner | A cosignatory added is already cosignatory of that multisig account. |
      | Failure_Multisig_Modify_Min_Setting_Out_Of_Range | Multisig modification parameters are negative and inferior to the number of cosignatories of the multisig.|
      | Failure_Multisig_Modify_Min_Setting_Larger_Than_Num_Cosignatories | It is not possible to set more required signatures than cosignatories has the multisig. |
      | Failure_Multisig_Modify_Unsupported_Modification_Type | The modification type is different than add (0) or remove (1). |
      | Failure_Multisig_Modify_Max_Cosigned_Accounts | An account cannot be cosignatory of more than `5` multisig accounts.  |
      | Failure_Multisig_Modify_Max_Cosigners | A multisig account cannot have more than `10` cosignatories. |
      | Failure_Multisig_Modify_Loop | A multisig account cannot be cosignatory of itself. Neither an account can be turned into multisig having as cosignatory another multisig where the account is cosignatory. |
      | Failure_Multisig_Modify_Max_Multisig_Depth | The maximum depth of a multilevel multisig account is `3`.  |
      | Failure_Multisig_Operation_Not_Permitted_By_Account | A multisig account cannot be converted into a multisig account again. |
      | Failure_Namespace_Invalid_Duration | Duration lies too far in the future or refers to past. Duration is allowed to lie up to `N` blocks in the future. |
      | Failure_Mosaic_Invalid_Duration | Duration lies too far in the future or refers to past. Duration is allowed to lie up to `N` blocks in the future. |
      | Failure_Namespace_Invalid_Name | The namespace name is invalid. |
      | Failure_Mosaic_Invalid_Name | The name for the mosaic is invalid. |
      | Failure_Namespace_Name_Id_Mismatch | |
      | Failure_Mosaic_Name_Id_Mismatch | |
      | Failure_Namespace_Expired | Validation failed because the namespace has expired. |
      | Failure_Mosaic_Expired | Validation failed because the mosaic has expired. |
      | Failure_Namespace_Owner_Conflict | The signer of the transaction is not the owner of the namespace. |
      | Failure_Mosaic_Owner_Conflict| The signer of the transaction is not the owner of the mosaic. |
      | Failure_Namespace_Invalid_Namespace_Type | The namespace type is different than rootnamespace (0) or subnamesapce (1). |
      | Failure_Namespace_Root_Name_Reserved | Certain strings are reserved and thus not allowed as namespace parts. |
      | Failure_Namespace_Too_Deep  | Namespaces can have up to `3` levels. |
      | Failure_Namespace_Parent_Unknown | The provided parent namespace is unknown. |
      | Failure_Namespace_Already_Exists | The namespace already exists. |
      | Failure_Namespace_Already_Active | |
      | Failure_Namespace_Eternal_After_Nemesis_Block | The namespace duration is set to 0. |
      | Failure_Mosaic_Parent_Id_Conflict | |
      | Failure_Mosaic_Invalid_Property | Transaction payload is invalid as it contains invalid property. |
      | Failure_Mosaic_Invalid_Flags | Transaction payload is invalid as it contains an invalid flag. |
      | Failure_Mosaic_Invalid_Divisibility | The specified divisibility is greater than `6` or negative. |
      | Failure_Mosaic_Invalid_Supply_Change_Direction | The supply change direction is different than decrease (0) or increase (1). |
      | Failure_Mosaic_Invalid_Supply_Change_Amount  | The provided supply change amount is not greater than 0. |
      | Failure_Mosaic_Name_Reserved | Certain strings are reserved and thus not allowed as mosaic parts. |
      | Failure_Mosaic_Modification_Disallowed | |
      | Failure_Mosaic_Modification_No_Changes | The mosaic modification transaction did not alter the mosaic as it has the same definition. |
      | Failure_Mosaic_Supply_Immutable | Validation failed because the mosaic supply is immutable. |
      | Failure_Mosaic_Supply_Negative | Validation failed because the resulting mosaic supply would be negative. |
      | Failure_Mosaic_Supply_Exceeded | The provided mosaic supply is not in the range of 0 and 9.000.000.000. |
      | Failure_Mosaic_Non_Transferable | Only the creator of the mosaic is eligible to be the recipient of a non-transferable mosaic once transferred. |
      | Failure_Transfer_Message_Too_Large  | The message for the transaction exceeds the limit of `1024` bytes. |
      | Failure_Transfer_Out_Of_Order_Mosaics | Mosaics on a transfer transaction should be ordered by id value. |
      | Failure_Chain_Unlinked | |
      | Failure_Chain_Block_Not_Hit | |
      | Failure_Consumer_Empty_Input | |
      | Failure_Consumer_Block_Transactions_Hash_Mismatch | |
      | Failure_Consumer_Hash_In_Recency_Cache | |
      | Failure_Consumer_Remote_Chain_Too_Many_Blocks | |
      | Failure_Consumer_Remote_Chain_Improper_Link | |
      | Failure_Consumer_Remote_Chain_Duplicate_Transactions | |
      | Failure_Consumer_Remote_Chain_Unlinked | |
      | Failure_Consumer_Remote_Chain_Mismatched_Difficulties | |
      | Failure_Consumer_Remote_Chain_Score_Not_Better | |
      | Failure_Consumer_Remote_Chain_Too_Far_Behind | |
      | Failure_Extension_Partial_Transaction_Cache_Prune | |
      | Failure_Extension_Partial_Transaction_Dependency_Removed | |

schemes:
  - http
paths:
  '/account/{accountId}':
    get:
      tags:
        - Account routes
      summary: Get account information
      description: Returns the account information.
      operationId: getAccountInfo
      produces:
        - application/json
      parameters:
        - name: accountId
          in: path
          description: The public key or address of the account.
          required: true
          type: string
          default: SDRDGFTDLLCB67D4HPGIMIHPNSRYRJRT7DOBGWZY
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/AccountInfoDTO'
        '404':
          description: resource not found
        '409':
          description: invalid argument
  /account:
    post:
      tags:
        - Account routes
      summary: Get accounts information
      description: Returns the account information for an array of accounts.
      operationId: getAccountsInfo
      produces:
        - application/json
      parameters:
        - name: addresses
          in: body
          description: An array of addresses.
          required: true
          schema:
            $ref: '#/definitions/addresses'
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/AccountInfoDTO'
        '400':
          description: invalid content
        '409':
          description: invalid argument
  '/account/{publicKey}/transactions':
    get:
      tags:
        - Account routes
      summary: Get confirmed transactions
      description: Gets an array of transactions for which an account is the sender or receiver.
      operationId: transactions
      produces:
        - application/json
      parameters:
        - name: publicKey
          in: path
          description: The public key of the account.
          required: true
          type: string
          default: EB6839C7E6BD0031FDD5F8CB5137E9BC950D7EE7756C46B767E68F3F58C24390
        - name: pageSize
          in: query
          minimum: 10
          maximum: 100
          description: 'The number of transactions to return for each request. The default value is 10, the minimum is 10 and the maximum is 100.'
          type: integer
        - name: id
          in: query
          description: The identifier of the transaction after which we want the transactions to be returned. If not supplied the most recent transactions are returned.
          type: string
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              type: object
        '409':
          description: invalid argument
  '/account/{publicKey}/transactions/incoming':
    get:
      tags:
        - Account routes
      summary: Get incoming transactions
      description: Gets an array of incoming transactions. A transaction is said to be incoming with respect to an account if the account is the recipient of the transaction.
      operationId: incomingTransactions
      produces:
        - application/json
      parameters:
        - name: publicKey
          in: path
          description: The public key of the account.
          required: true
          type: string
          default: EB6839C7E6BD0031FDD5F8CB5137E9BC950D7EE7756C46B767E68F3F58C24390
        - name: pageSize
          in: query
          minimum: 10
          maximum: 100
          description: 'The number of transactions to return for each request. The default value is 10, the minimum is 10 and the maximum is 100.'
          type: integer
        - name: id
          in: query
          description: The identifier of the transaction after which we want the transactions to be returned. If not supplied the most recent transactions are returned.
          type: string
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              type: object
        '409':
          description: invalid argument
  '/account/{publicKey}/transactions/outgoing':
    get:
      tags:
        - Account routes
      summary: Get outgoing transactions
      description: Gets an array of outgoing transactions. A transaction is said to be outgoing with respect to an account if the account is the sender of the transaction.
      operationId: outgoingTransactions
      produces:
        - application/json
      parameters:
        - name: publicKey
          in: path
          description: The public key of the account.
          required: true
          type: string
          default: EB6839C7E6BD0031FDD5F8CB5137E9BC950D7EE7756C46B767E68F3F58C24390
        - name: pageSize
          in: query
          minimum: 10
          maximum: 100
          description: 'The number of transactions to return for each request. The default value is 10, the minimum is 10 and the maximum is 100.'
          type: integer
        - name: id
          in: query
          description: The identifier of the transaction after which we want the transactions to be returned. If not supplied the most recent transactions are returned.
          type: string
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              type: object
        '409':
          description: invalid argument
  '/account/{publicKey}/transactions/unconfirmed':
    get:
      tags:
        - Account routes
      summary: Get unconfirmed transactions
      description: Gets the array of transactions for which an account is the sender or receiver and which have not yet been included in a block.
      operationId: unconfirmedTransactions
      produces:
        - application/json
      parameters:
        - name: publicKey
          in: path
          description: The public key of the account.
          required: true
          type: string
          default: EB6839C7E6BD0031FDD5F8CB5137E9BC950D7EE7756C46B767E68F3F58C24390
        - name: pageSize
          in: query
          minimum: 10
          maximum: 100
          description: 'The number of transactions to return for each request. The default value is 10, the minimum is 10 and the maximum is 100.'
          type: integer
        - name: id
          in: query
          description: The identifier of the transaction after which we want the transactions to be returned. If not supplied the most recent transactions are returned.
          type: string
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              type: object
        '409':
          description: invalid argument
  '/account/{publicKey}/transactions/partial':
    get:
      tags:
        - Account routes
      summary: Get aggregate bonded transactions information
      description: Gets an array of [aggregate bonded transactions](https://nemtech.github.io/concepts/aggregate-transaction.html#aggregate-bonded) where the account is the sender or requires to cosign the transaction.
      operationId: partialTransactions
      produces:
        - application/json
      parameters:
        - name: publicKey
          in: path
          description: The public key of the account.
          required: true
          type: string
          default: EB6839C7E6BD0031FDD5F8CB5137E9BC950D7EE7756C46B767E68F3F58C24390
        - name: pageSize
          in: query
          minimum: 10
          maximum: 100
          description: 'The number of transactions to return for each request. The default value is 10, the minimum is 10 and the maximum is 100.'
          type: integer
        - name: id
          in: query
          description: The identifier of the transaction after which we want the transactions to be returned. If not supplied the most recent transactions are returned.
          type: string
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              type: object
        '409':
          description: invalid argument
  '/account/{accountId}/multisig':
    get:
      tags:
        - Account routes
      summary: Get multisig account information
      description: Returns [multisig account](https://nemtech.github.io/concepts/multisig-account.html) information.
      operationId: getAccountMultisig
      produces:
        - application/json
      parameters:
        - name: accountId
          in: path
          description: The public key or address of the account.
          required: true
          type: string
          default: SBCPGZ3S2SCC3YHBBTYDCUZV4ZZEPHM2KGCP4QXX
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/MultisigAccountInfoDTO'
        '404':
          description: resource not found
        '409':
          description: invalid argument
  '/account/{accountId}/multisig/graph':
    get:
      tags:
        - Account routes
      summary: Get multisig account graph information
      description: Returns [multisig account](https://nemtech.github.io/concepts/multisig-account.html) graph.
      operationId: getAccountMultisigGraph
      produces:
        - application/json
      parameters:
        - name: accountId
          in: path
          description: The public key or address of the account.
          required: true
          type: string
          default: SBCPGZ3S2SCC3YHBBTYDCUZV4ZZEPHM2KGCP4QXX
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/MultisigAccountGraphInfoDTO'
        '404':
          description: resource not found
        '409':
          description: invalid argument
  '/blocks/{height}/limit/{limit}':
    get:
      tags:
        - Blockchain routes
      summary: Get blocks information
      description: Gets up to limit number of blocks after given block height from the chain.
      operationId: getBlocksByHeightWithLimit
      produces:
        - application/json
      parameters:
        - name: height
          in: path
          description: The block's height.
          required: true
          type: integer
          format: int64
          minimum: 0
          default: 1
        - name: limit
          in: path
          description: The number of following blocks to be returned.
          required: true
          type: integer
          minimum: 0
          format: int
          default: 25
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/BlockInfoDTO'
        '409':
          description: invalid argument
  '/block/{height}':
    get:
      tags:
        - Blockchain routes
      summary: Get block information
      description: Gets a block from the chain that has the given height.
      operationId: getBlockByHeight
      produces:
        - application/json
      parameters:
        - name: height
          in: path
          description: The block's height.
          required: true
          type: integer
          format: int64
          default: 1
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/BlockInfoDTO'
        '404':
          description: resource not found
        '409':
          description: invalid argument
  '/block/{height}/transactions':
    get:
      tags:
        - Blockchain routes
      summary: Get transactions from a block
      description: Returns an array of transactions included in a block for a given block height.
      operationId: getBlockTransactions
      produces:
        - application/json
      parameters:
        - name: height
          in: path
          description: The block's height.
          required: true
          type: integer
          format: int64
          default: 1
        - name: pageSize
          in: query
          minimum: 10
          maximum: 100
          description: 'The number of transactions to return for each request. The default value is 10, the minimum is 10 and the maximum is 100.'
          type: integer
        - name: id
          in: query
          description: The identifier of the transaction after which we want the transactions to be returned. If not supplied the most recent transactions are returned.
          type: string
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              type: object
        '404':
          description: resource not found
        '409':
          description: invalid argument

  /chain/height:
    get:
      tags:
        - Blockchain routes
      summary: Get the current height of the chain
      description: Returns the current height of the block chain.
      operationId: getBlockchainHeight
      produces:
        - application/json
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/HeightDTO'
  /chain/score:
    get:
      tags:
        - Blockchain routes
      summary: Get the current score of the chain
      description: Gets the current score of the block chain. The higher the score, the better the chain. During synchronization, nodes try to get the best block chain in the network.
      operationId: getBlockchainScore
      produces:
        - application/json
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/BlockchainScoreDTO'
  /diagnostic/storage:
    get:
      tags:
        - Blockchain routes
      summary: Get the storage information
      description: Returns statistical information about the blockchain.
      operationId: getDiagnosticStorage
      produces:
        - application/json
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/BlockchainStorageInfoDTO'
  '/mosaic/{mosaicId}':
    get:
      tags:
        - Mosaic routes
      summary: Get mosaic information
      description: Gets the mosaic definition for a given mosaicId.
      operationId: getMosaic
      produces:
        - application/json
      parameters:
        - name: mosaicId
          in: path
          description: The mosaic identifier.
          type: string
          required: true
          default: d525ad41d95fcf29
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/MosaicInfoDTO'
        '404':
          description: resource not found
        '409':
          description: invalid argument
  /mosaic:
    post:
      tags:
        - Mosaic routes
      summary: Get mosaics information for an array of mosaics
      description: Gets an array of mosaic definition.
      operationId: getMosaics
      produces:
        - application/json
      parameters:
        - name: mosaicIds
          in: body
          description: An array of mosaicIds.
          required: true
          schema:
            $ref: '#/definitions/mosaicIds'
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/MosaicInfoDTO'
        '400':
          description: invalid content
        '409':
          description: invalid argument
  '/namespace/{namespaceId}/mosaics':
    get:
      tags:
        - Mosaic routes
      summary: Get mosaics information for a given namespace.
      description: Gets an array of mosaic definition from mosaics created under the provided namespace.
      operationId: getMosaicsFromNamespace
      produces:
        - application/json
      parameters:
        - name: namespaceId
          in: path
          description: The namespace identifier.
          type: string
          required: true
          default: 84b3552d375ffa4b
        - name: pageSize
          in: query
          description: The number of mosaics to return.
          type: integer
        - name: id
          in: query
          description: The mosaic id up to which mosaic definitions are returned.
          type: string
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/MosaicInfoDTO'
        '409':
          description: invalid argument
  /mosaic/names:
    post:
      tags:
        - Mosaic routes
      summary: Get readable names for a set of mosaics
      description: Returns friendly names for mosaics.
      operationId: getMosaicsName
      produces:
        - application/json
      parameters:
        - name: mosaicIds
          in: body
          description: An array of mosaicIds.
          required: true
          schema:
            $ref: '#/definitions/mosaicIds'
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/MosaicNameDTO'
        '400':
          description: invalid content
        '409':
          description: invalid argument
  '/namespace/{namespaceId}':
    get:
      tags:
        - Namespace routes
      summary: Get namespace information
      description: Gets the namespace for a given namespaceId.
      operationId: getNamespace
      produces:
        - application/json
      parameters:
        - name: namespaceId
          in: path
          description: The namespace identifier.
          type: string
          required: true
          default: 84b3552d375ffa4b
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/NamespaceInfoDTO'
        '404':
          description: resource not found
        '409':
          description: invalid argument
  '/account/{accountId}/namespaces':
    get:
      tags:
        - Namespace routes
      summary: Get namespaces owned by an account
      description: Gets an array of namespaces for a given account address.
      operationId: getNamespacesFromAccount
      produces:
        - application/json
      parameters:
        - name: accountId
          in: path
          description: The address or public key of the account.
          required: true
          type: string
          default: SDRDGFTDLLCB67D4HPGIMIHPNSRYRJRT7DOBGWZY
        - name: pageSize
          in: query
          description: The number of namespaces to return.
          type: integer
        - name: id
          in: query
          description: The namespace id up to which namespace objects are returned.
          type: string
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/NamespaceInfoDTO'
        '409':
          description: invalid argument
  /account/namespaces:
    post:
      tags:
        - Namespace routes
      summary: Get namespaces for given array of addresses
      description: Gets namespaces for a given array of addresses.
      operationId: getNamespacesFromAccounts
      produces:
        - application/json
      parameters:
        - name: addresses
          in: body
          description: An array of addresses.
          required: true
          schema:
            $ref: '#/definitions/addresses'
        - name: pageSize
          in: query
          description: The number of namespaces to return.
          type: integer
        - name: id
          in: query
          description: The namespace id up to which namespace objects are returned.
          type: string
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/NamespaceInfoDTO'
        '400':
          description: invalid content
        '409':
          description: invalid argument
  /namespace/names:
    post:
      tags:
        - Namespace routes
      summary: Get readable names for a set of namespaces
      description: Returns friendly names for mosaics.
      operationId: getNamespacesNames
      produces:
        - application/json
      parameters:
        - name: namespaceIds
          in: body
          description: An array of namespaceIds.
          required: true
          schema:
            $ref: '#/definitions/namespaceIds'
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/NamespaceNameDTO'
        '400':
          description: invalid content
        '409':
          description: invalid argument
  '/transaction/{transactionId}':
    get:
      tags:
        - Transaction routes
      summary: Get transaction information
      description: Returns transaction information given a transactionId or hash.
      operationId: getTransaction
      produces:
        - application/json
      parameters:
        - name: transactionId
          in: path
          description: The transaction id or hash.
          required: true
          type: string
          default: 5AB412B5C60E68000145A4C2
      responses:
        '200':
          description: success
          schema:
            type: object
        '404':
          description: resource not found
        '409':
          description: invalid argument
  /transaction:
    post:
      tags:
        - Transaction routes
      summary: Get transactions information
      description: Returns transactions information for a given array of transactionIds.
      operationId: getTransactions
      produces:
        - application/json
      parameters:
        - name: transactionIds
          in: body
          description: An array of transaction ids or hashes.
          required: true
          schema:
            $ref: '#/definitions/transactionIds'
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              type: object
        '400':
          description: invalid content
        '409':
          description: invalid argument
    put:
      tags:
        - Transaction routes
      summary: Announce a new transaction
      description: Announces a [transaction](https://nemtech.github.io/concepts/transaction.html) to the network. It is recommended to use the NEM2-SDK to announce transactions.
      operationId: announceTransaction
      produces:
        - application/json
      parameters:
        - name: payload
          in: body
          description: The transaction [payload](https://github.com/nemtech/guidelines/blob/master/development/sdk-development.md#transaction-serialization).
          required: true
          schema:
            $ref: '#/definitions/transactionPayload'
      responses:
        '202':
          description: success
          schema:
            type: object
            items:
              $ref: '#/definitions/AnnounceTransactionInfoDTO'
        '400':
          description: invalid content
        '409':
          description: invalid argument
  /transaction/partial:
    put:
      tags:
        - Transaction routes
      summary: Announce an aggregate bonded transaction
      description: Announces an [aggregate bonded transaction](https://nemtech.github.io/concepts/aggregate-transaction.html#aggregate-bonded) to the network.
      operationId: announcePartialTransaction
      produces:
        - application/json
      parameters:
        - name: payload
          in: body
          description: The transaction [payload](https://github.com/nemtech/guidelines/blob/master/development/sdk-development.md#transaction-serialization).
          required: true
          schema:
            $ref: '#/definitions/transactionPayload'
      responses:
        '202':
          description: success
          schema:
            type: object
            items:
              $ref: '#/definitions/AnnounceTransactionInfoDTO'
        '400':
          description: invalid content
        '409':
          description: invalid argument
  /transaction/cosignature:
    put:
      tags:
        - Transaction routes
      summary: Announce a cosignature transaction
      description: Announces a [cosignature transaction](https://nemtech.github.io/concepts/aggregate-transaction.html#cosignature-transaction) to the network.  It is recommended to use the NEM2-SDK to announce transactions.
      operationId: announceCosignatureTransaction
      produces:
        - application/json
      parameters:
        - name: payload
          in: body
          description: The transaction [payload](https://github.com/nemtech/guidelines/blob/master/development/sdk-development.md#transaction-serialization).
          required: true
          schema:
            $ref: '#/definitions/transactionPayload'
      responses:
        '202':
          description: success
          schema:
            type: object
            items:
              $ref: '#/definitions/AnnounceTransactionInfoDTO'
        '400':
          description: invalid content
        '409':
          description: invalid argument
  '/transaction/{hash}/status':
    get:
      tags:
        - Transaction routes
      summary: Get transaction status
      description: Returns the transaction status for a given hash.
      operationId: getTransactionStatus
      produces:
        - application/json
      parameters:
        - name: hash
          in: path
          description: The transaction hash.
          required: true
          type: string
          default: F0078795F73549AF8DC74CBA70533250016FA45CACCD494877291CE02299C414
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/TransactionStatusDTO'
        '404':
          description: resource not found
        '409':
          description: invalid argument
  /transaction/statuses:
    post:
      tags:
        - Transaction routes
      summary: Get transactions status.
      description: Returns an array of transaction statuses for a given array of transaction hashes.
      operationId: getTransactionsStatuses
      produces:
        - application/json
      parameters:
        - name: transactionHashes
          in: body
          description: An array of transaction hashes.
          required: true
          schema:
            $ref: '#/definitions/transactionHashes'
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/TransactionStatusDTO'
        '400':
          description: invalid content
        '409':
          description: invalid argument
  /network:
    get:
      tags:
        - Network routes
      summary: Get the current network type of the chain
      description: Returns the current network type.
      operationId: getNetworkType
      produces:
        - application/json
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/NetworkTypeDTO'

  /node/info:
    get:
      tags:
        - Node routes
      summary: Get the node information
      description: Supplies additional information about the application running on a [Node](https://nemtech.github.io/concepts/node.html).
      operationId: getNodeInfo
      produces:
        - application/json
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/NodeInfoDTO'

  /node/time:
    get:
      tags:
        - Node routes
      summary: Get the node time
      description:  Supplies additional information about the application running on a node.
      operationId: getNodeTime
      produces:
        - application/json
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/NodeTimeDTO'

definitions:
  AccountInfoDTO:
    type: object
    required:
      - meta
      - account
    properties:
      meta:
        $ref: '#/definitions/AccountMetaDTO'
      account:
        $ref: '#/definitions/AccountDTO'
  AccountMetaDTO:
    type: object
  AccountDTO:
    type: object
    required:
      - address
      - addressHeight
      - publicKey
      - publicKeyHeight
      - mosaics
      - importance
      - importanceHeight
    properties:
      address:
        type: string
      addressHeight:
        $ref: '#/definitions/UInt64DTO'
      publicKey:
        type: string
      publicKeyHeight:
        $ref: '#/definitions/UInt64DTO'
      mosaics:
        type: array
        items:
          $ref: '#/definitions/MosaicDTO'
      importance:
        $ref: '#/definitions/UInt64DTO'
      importanceHeight:
        $ref: '#/definitions/UInt64DTO'
  MultisigAccountGraphInfoDTO:
    type: object
    required:
      - level
      - multisigEntries
    properties:
      level:
        type: integer
      multisigEntries:
        type: array
        items:
          $ref: '#/definitions/MultisigAccountInfoDTO'
  MultisigAccountInfoDTO:
    type: object
    required:
      - multisig
    properties:
      multisig:
        $ref: '#/definitions/Multisig'
  Multisig:
    type: object
    required:
      - account
      - minApproval
      - minRemoval
      - cosignatories
      - multisigAccounts
    properties:
      account:
        type: string
      accountAddress:
        type: string
      minApproval:
        type: integer
      minRemoval:
        type: integer
      cosignatories:
        type: array
        items:
          type: string
      multisigAccounts:
        type: array
        items:
          type: string
  AnnounceTransactionInfoDTO:
    type: object
    required:
      - message
    properties:
      message:
        type: string
  TransactionStatusDTO:
    type: object
    required:
      - status
    properties:
      group:
        type: string
      status:
        type: string
      hash:
        type: string
      deadline:
        $ref: '#/definitions/UInt64DTO'
      height:
        $ref: '#/definitions/UInt64DTO'
  MosaicDTO:
    type: object
    required:
      - id
      - amount
    properties:
      id:
        $ref: '#/definitions/UInt64DTO'
      amount:
        $ref: '#/definitions/UInt64DTO'
  MosaicInfoDTO:
    type: object
    required:
      - meta
      - mosaic
    properties:
      meta:
        $ref: '#/definitions/NamespaceMosaicMetaDTO'
      mosaic:
        $ref: '#/definitions/MosaicDefinitionDTO'
  NamespaceMosaicMetaDTO:
    type: object
    required:
      - active
      - index
      - id
    properties:
      active:
        type: boolean
      index:
        type: integer
      id:
        type: string
  MosaicDefinitionDTO:
    type: object
    required:
      - namespaceId
      - mosaicId
      - supply
      - height
      - owner
      - properties
      - levy
    properties:
      namespaceId:
        $ref: '#/definitions/UInt64DTO'
      mosaicId:
        $ref: '#/definitions/UInt64DTO'
      supply:
        $ref: '#/definitions/UInt64DTO'
      height:
        $ref: '#/definitions/UInt64DTO'
      owner:
        type: string
      properties:
        $ref: '#/definitions/MosaicPropertiesDTO'
      levy:
        type: object
  MosaicPropertiesDTO:
    type: array
    items:
      $ref: '#/definitions/UInt64DTO'
    example:
      - - 0
        - 0
      - - 0
        - 0
      - - 0
        - 0
  MosaicNameDTO:
    type: object
    required:
      - parentId
      - mosaicId
      - name
    properties:
      parentId:
        $ref: '#/definitions/UInt64DTO'
      mosaicId:
        $ref: '#/definitions/UInt64DTO'
      name:
        type: string
  NamespaceInfoDTO:
    type: object
    required:
      - meta
      - namespace
    properties:
      meta:
        $ref: '#/definitions/NamespaceMosaicMetaDTO'
      namespace:
        $ref: '#/definitions/NamespaceDTO'
  NamespaceDTO:
    type: object
    required:
      - type
      - depth
      - level0
      - parentId
      - owner
      - startHeight
      - endHeight
    properties:
      type:
        type: integer
      depth:
        type: integer
      level0:
        $ref: '#/definitions/UInt64DTO'
      level1:
        $ref: '#/definitions/UInt64DTO'
      level2:
        $ref: '#/definitions/UInt64DTO'
      parentId:
        $ref: '#/definitions/UInt64DTO'
      owner:
        type: string
      ownerAddress:
        type: string
      startHeight:
        $ref: '#/definitions/UInt64DTO'
      endHeight:
        $ref: '#/definitions/UInt64DTO'
  NamespaceNameDTO:
    type: object
    required:
      - namespaceId
      - name
    properties:
      parentId:
        $ref: '#/definitions/UInt64DTO'
      namespaceId:
        $ref: '#/definitions/UInt64DTO'
      name:
        type: string
  BlockInfoDTO:
    type: object
    required:
      - meta
      - block
    properties:
      meta:
        $ref: '#/definitions/BlockMetaDTO'
      block:
        $ref: '#/definitions/BlockDTO'
  BlockMetaDTO:
    type: object
    required:
      - hash
      - generationHash
      - totalFee
      - numTransactions
    properties:
      hash:
        type: string
      generationHash:
        type: string
      totalFee:
        $ref: '#/definitions/UInt64DTO'
      numTransactions:
        type: number
  BlockDTO:
    type: object
    required:
      - signature
      - signer
      - version
      - type
      - height
      - timestamp
      - difficulty
      - previousBlockHash
      - blockTransactionsHash
    properties:
      signature:
        type: string
      signer:
        type: string
      version:
        type: number
      type:
        type: number
      height:
        $ref: '#/definitions/UInt64DTO'
      timestamp:
        $ref: '#/definitions/UInt64DTO'
      difficulty:
        $ref: '#/definitions/UInt64DTO'
      previousBlockHash:
        type: string
      blockTransactionsHash:
        type: string
  HeightDTO:
    type: object
    required:
      - height
    properties:
      height:
        $ref: '#/definitions/UInt64DTO'
  BlockchainScoreDTO:
    type: object
    required:
      - scoreHigh
      - scoreLow
    properties:
      scoreHigh:
        $ref: '#/definitions/UInt64DTO'
      scoreLow:
        $ref: '#/definitions/UInt64DTO'
  BlockchainStorageInfoDTO:
    type: object
    required:
      - numBlocks
      - numTransactions
      - numAccounts
    properties:
      numBlocks:
        type: integer
      numTransactions:
        type: integer
      numAccounts:
        type: integer
  NetworkTypeDTO:
    type: object
    required:
      - name
      - description
    properties:
      name:
        type: string
        example: mijinTest
      description:
        type: string
        example: catapult development network

  NodeInfoDTO:
    type: object
    required:
      - publicKey
      - port
      - networkIdentifier
      - version
      - roles
      - host
      - friendlyName
    properties:
      publicKey:
        type: string
        example: EB6839C7E6BD0031FDD5F8CB5137E9BC950D7EE7756C46B767E68F3F58C24390
      port:
        type: integer
        format: int32
        example: 7900
      networkIdentifier:
        type: integer
        format: int32
        example: 144
      version:
        type: integer
        format: int32
        example: 0
      roles:
        type: integer
        format: int32
        example: 2
      host:
        type: string
        example: api-node-0
      friendlyName:
        type: string
        example: api-node-0
  NodeTimeDTO:
    type: object
    required:
      - communicationTimestamps
    properties:
      communicationTimestamps:
        $ref: '#/definitions/communicationTimestamps'
  mosaicIds:
    type: object
    properties:
      mosaicIds:
        type: array
        items:
          type: string
        example:
          - d525ad41d95fcf29
  namespaceIds:
    type: object
    properties:
      namespaceIds:
        type: array
        items:
          type: string
        example:
          - 84b3552d375ffa4b
  addresses:
    type: object
    properties:
      addresses:
        type: array
        items:
          type: string
        example:
          - SDRDGFTDLLCB67D4HPGIMIHPNSRYRJRT7DOBGWZY
          - SBCPGZ3S2SCC3YHBBTYDCUZV4ZZEPHM2KGCP4QXX
  transactionIds:
    type: object
    properties:
      transactionIds:
        type: array
        items:
          type: string
        example:
          - 59B8DA0F0CB2720001103922
          - 59B8D8E60CB2720001103904
  transactionHashes:
    type: object
    properties:
      hashes:
        type: array
        items:
          type: string
        example:
          - 5AF72FE39C0515E823903918A0BFE9625DD752C7BD63969C8869F25E9D155DE5
  transactionPayload:
    type: object
    properties:
      payload:
        type: string
        default: payload
        example: example
  communicationTimestamps:
    type: object
    properties:
      sendTimestamp:
        $ref: '#/definitions/UInt64DTO'
      receiveTimestamp:
        $ref: '#/definitions/UInt64DTO'
  UInt64DTO:
    type: array
    items:
      type: integer
      format: int32
    example:
      - lower
      - higher
externalDocs:
  description: NEM Developer Center
  url: 'https://nemtech.github.io/'